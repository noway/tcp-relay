#!/usr/bin/env python3
"""TCP relay based on 1-second wait (2 states)."""

import asyncio
import logging
import argparse

import sys
try:
    import signal
except ImportError:
    signal = None


log = logging.getLogger(__name__)
loop = None

RELAY_WAIT_PORT = 8001
RELAY_ACTION_PORT = 8002

RELAY_WAIT_IP = "127.0.0.1"
RELAY_ACTON_IP = "10.0.42.2"

maxc=40
class ServerRetranslator(asyncio.Protocol):
    """Handler for server"""

    writer = None
    transport = None
    reader = None
    got_eof = False

    def connection_made(self, transport):
        self.transport = transport
        log.info('Connection made: {0}'.format(self))

    def data_received(self, data):
        log.debug("server(%d b): %r"%(len(data),data[:maxc]))
        if self.got_eof:
            loggin.error("SERVER SEND AFTER EOF")
        self.writer.write(data)

    def eof_received(self):
        self.got_eof = True
        log.info("Got EOF from server")

        try:
            self.writer.write_eof()
        except Exception:
            pass
    def connection_lost(self, exc):
        log.info("Got close from server")
        try:
            self.writer.write_eof()
        except Exception:
            pass


def accept_client(client_reader, client_writer):
    log.info("New Connection")
    task = asyncio.Task(handle_client(client_reader, client_writer))


async def handle_client(client_reader, client_writer):
    data = b''
    port = None
    protocol = None
    client_protocol = client_writer._protocol

    log.info(client_writer._transport._sock)

    try:
        if not client_reader._buffer:
            await client_reader._wait_for_data('readuntil')#, timeout=5.0)
        data = bytes(client_reader._buffer)
        

    #data = await asyncio.wait_for(client_reader.readline(), timeout=1.0)
    except Exception:
        pass


    log.info("heredat (%d b): %r" %(len(data),data))
    if data.decode('cp437').startswith("SSH"): # assuming good old DOS days
    #if data is not None:
        log.info("opening RELAY_WAIT_PORT ssh")
        port = RELAY_WAIT_PORT
        ip = RELAY_WAIT_IP
    else:
        log.info("opening RELAY_ACTION_PORT vpn")
        port = RELAY_ACTION_PORT
        ip = RELAY_ACTION_IP

    try:
        _, protocol = await asyncio.ensure_future(
            loop.create_connection(ServerRetranslator, ip, port))

        protocol.writer = client_writer
        protocol.reader = client_reader
        client_protocol.other = protocol

    except Exception:
        pass

    #if data != b'':
    #    log.info("sending heredat(%d b) back %r"%(len(data),data[:maxc]))
    #    protocol.transport.write(data)


    if protocol is None:
        log.error("Can't connect to the server")
        client_writer.write_eof()
        return

    got_eof = False
    def conn_lost(tr):
        log.info("Got close from client")
        try:
            tr.write_eof()
        except Exception:
            pass
    def data_rec(data):

        log.debug("client (%d b): %r" % (len(data), data[:maxc]))
        if got_eof:
            log.error("writing to server from client AFTER EOF")
        protocol.transport.write(data)
    def handle_eof():
        got_eof = True
        try:
            
            protocol.transport.write_eof()
        except Exception:
            pass
    client_protocol.data_received = lambda data: data_rec(data)
    client_protocol.eof_received = lambda: handle_eof()
    client_protocol.connection_lost = lambda exc: conn_lost(protocol.transport)
    data = bytes(client_reader._buffer)
    if data != b'' :
        log.info("sending heredat(%d b) back %r"%(len(data),data[:maxc]))
        protocol.transport.write(data)




ARGS = argparse.ArgumentParser(description="TCP relay.")

ARGS.add_argument(
    '--port', action="store", dest='port',
    default=8000, type=int, help='Output port')

ARGS.add_argument(
    '--waiter', action="store", dest='wait',
    default='127.0.0.1:22', type=str, help='Adress of waiter protocol')

ARGS.add_argument(
    '--actioner', action="store", dest='action',
    default='10.0.42.2:443', type=str, help='Adress of actioner protocol')

ARGS.add_argument(
    '--quiet', action="store", dest='quiet',
    default=0, type=int, help="Don't show debug info")


if __name__ == '__main__':
    args = ARGS.parse_args()

    RELAY_ACTION_IP, RELAY_ACTION_PORT = args.action.split(':')
    RELAY_WAIT_IP, RELAY_WAIT_PORT = args.wait.split(':')

    log = logging.getLogger("")
    formatter = logging.Formatter("%(asctime)s %(levelname)s " +
                                  "[%(module)s:%(lineno)d] %(message)s")
    # setup console logging

    lvl = logging.DEBUG
    if args.quiet == 2:
        log.error('ERROR ONLY')
        lvl = logging.ERROR
    if args.quiet == 1:
        lvl = logging.INFO

    log.setLevel(lvl)
    ch = logging.StreamHandler()
    ch.setLevel(lvl)

    ch.setFormatter(formatter)
    log.addHandler(ch)

    # start the server

    loop = asyncio.get_event_loop()

    if signal is not None and sys.platform != 'win32':
        loop.add_signal_handler(signal.SIGINT, loop.stop)

    f = asyncio.start_server(accept_client, host=None, port=args.port)
    loop.run_until_complete(f)
    loop.run_forever()
